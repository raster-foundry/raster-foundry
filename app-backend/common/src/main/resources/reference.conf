auth0 {
  clientId = ""
  clientId = ${?AUTH0_CLIENT_ID}
  domain = ""
  domain = ${?AUTH0_DOMAIN}
  # Development Secret Only
  secret = ""
  secret = ${?AUTH0_CLIENT_SECRET}
  # Auth0 Bearer with proper permissions for Management API
  bearer = ""
  bearer = ${?AUTH0_MANAGEMENT_BEARER}
  jwksURL = ""
  jwksURL = ${?AUTH0_JWKS_URL}
}

awsbatch {
  jobQueue = ${?BATCH_JOB_QUEUE_DEFAULT}
  ingestJobQueue = ${?BATCH_JOB_QUEUE_INGEST}

  importJobName = ${?BATCH_JOB_NAME_PROCESS_UPLOAD}
  ingestJobName = ${?BATCH_JOB_NAME_INGEST_SCENE}
  exportJobName = ${?BATCH_JOB_NAME_EXPORT}

  environment = "development"
  environment = ${?ENVIRONMENT}

}

memcached {
  host = "tile-cache.service.rasterfoundry.internal"
  host = ${?MEMCACHED_HOST}

  port = 11211
  port = ${?MEMCACHED_PORT}

  dynamicClientMode = false
  dynamicClientMode = ${?MEMCACHED_DYNAMIC_CLIENT_MODE}

  timeout = 3000
  timeout = ${?MEMCACHED_TIMEOUT}

  threads = 16
  threads = ${?MEMCACHED_THREADS}

  enabled = true
  enabled = ${?MEMCACHED_ENABLED}

  layerAttributes.enabled = true
  layerAttributes.enabled = ${?MEMCACHED_LAYER_ATTRIBUTES}

  layerTile.enabled = true
  layerTile.enabled = ${?MEMCACHED_LAYER_TILES}

  tool.enabled = true
  tool.enabled = ${?MEMCACHED_TILE_HISTOGRAM}
}

geotrellis {
  attributeStore {
    postgres {
      threads = 8
      threads = ${?ATTRIBUTE_STORE_THREADS}
      timeout = "5s"
    }
  }
}
