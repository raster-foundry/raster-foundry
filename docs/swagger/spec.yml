swagger: '2.0'
info:
  title: Raster Foundry
  description: An application to find and manipulate large-scale geospatial and raster data
  version: "0.1.0"

host: localhost:9000

schemes:
  - http
  - https

basePath: /api

produces:
  - application/json
consumes:
  - application/json

tags:
  - name: Users
    description: Operations involving users and organizations
  - name: Authentication
    description: Resources to obtain, use, and delete API tokens
  - name: Imagery
    description: Interact with imagery
  - name: Model Lab
    description: Geospatial processing discovery and endpoints
  - name: Statistics
    description: Statistical metadata about geospatial data

paths:
  /users/:
    get:
      summary: Get a list of users
      description: |
        The Users API endpoint enables searching and listing users.
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/orderingBase'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/page'
      responses:
        200:
          description: Paginated list of users
          schema:
            $ref: '#/definitions/UserPaginated'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a user
      description: |
        Create a new user.
      tags:
        - Users
      parameters:
        - name: User
          in: body
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        201:
          description: User created
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{uuid}/:
    get:
      summary: Get a single user
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        200:
          description: User found
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update a user
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/uuid'
        - name: User
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        204:
          description: Update successful (No Content)
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /organizations/:
    get:
      summary: Retrieve list of organizations
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/orderingBase'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/page'
      responses:
        200:
          description: Paginated list of organizations
          schema:
            $ref: '#/definitions/OrganizationPaginated'
    post:
      summary: Create a new organization
      tags:
        - Users
      parameters:
        - name: organization
          in: body
          required: true
          schema:
            $ref: '#/definitions/Organization'
      responses:
        201:
          description: Return newly created organization
          schema:
            $ref: '#/definitions/Organization'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /organizations/{organizationId}/:
    get:
      summary: Retrieve details for an organization
      tags:
        - Users
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
      responses:
        200:
          description: Returned organization
          schema:
            $ref: '#/definitions/Organization'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update an organization
      tags:
        - Users
      parameters:
        - name: organization
          in: body
          required: true
          schema:
            $ref: '#/definitions/Organization'
        - name: organizationId
          in: path
          required: true
          type: string
      responses:
        204:
          description: Update successful (No Content)
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /organizations/{organizationId}/users/:
    get:
      summary: Get a list of users and their roles for the specified organization
      tags:
        - Users
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
      responses:
        200:
          description: Paginated list of user roles
          schema:
            $ref: '#/definitions/UserRolePaginated'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Add a user to an organization
      tags:
        - Users
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserRoleCreate'
      responses:
        201:
          description: Created user role
          schema:
            $ref: '#/definitions/UserRole'

  /organizations/{organizationId}/users/{userId}:
    get:
      summary: Get a user and their role for the specified organization
      tags:
        - Users
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
      responses:
        200:
          description: Returned user role
          schema:
            $ref: '#/definitions/UserRole'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update a user's role
      tags:
        - Users
      parameters:
        - name: organizationId
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
        - name: user role
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserRole'
      responses:
        204:
          description: Update Successful (No Content)
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /scenes/:
    get:
      summary: Lists paginated scenes that a user has access to
      description: |
        Scenes are groups of images that share metadata and would typically be viewed together on a map.
        They are ingested into Raster RDDs by GeoTrellis and are able to be added to buckets, mosaiced,
        and have other operations performed on them.
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/orderingScene'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/organization'
        - $ref: '#/parameters/maxCloudCover'
        - $ref: '#/parameters/minCloudCover'
        - $ref: '#/parameters/minAcquisitionDatetime'
        - $ref: '#/parameters/maxAcquisitionDatetime'
        - $ref: '#/parameters/minCreateDatetime'
        - $ref: '#/parameters/maxCreateDatetime'
        - $ref: '#/parameters/datasource'
        - $ref: '#/parameters/month'
        - $ref: '#/parameters/maxSunAzimuth'
        - $ref: '#/parameters/minSunAzimuth'
        - $ref: '#/parameters/maxSunElevation'
        - $ref: '#/parameters/minSunElevation'
        - $ref: '#/parameters/minResolution'
        - $ref: '#/parameters/maxResolution'
        - $ref: '#/parameters/tags'
        - $ref: '#/parameters/bbox'
        - $ref: '#/parameters/bucket'
      responses:
        200:
          description: Paginated list of scenes
          schema:
            $ref: '#/definitions/ScenePaginated'
    post:
      summary: Create a new scene
      tags:
        - Imagery
      responses:
        201:
          description: Successfully created a new scene
          schema:
            $ref: '#/definitions/Scene'
        400:
          description: Client error creating a scene
          schema:
            $ref: '#/definitions/Error'
  /scenes/{uuid}/:
    get:
      summary: Retrieve scene details
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        200:
          description: Info about Scene
          schema:
            $ref: '#/definitions/Scene'
        404:
          description: |
            UUID parameter does not refer to an scene or the user is not able to view the scene it refers to
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update a scene
      tags:
        - Imagery
      parameters:
        - name: scene
          in: body
          required: true
          schema:
            $ref: '#/definitions/Scene'
        - $ref: '#/parameters/uuid'
      responses:
        204:
          description: Update successful (no further processing needed)
        404:
          description: |
            The UUID parameter does not refer to a scene or the user does not have access to the scene it refers to
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete a scene (Warning will delete any associated imagery)
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        204:
          description: Deletion successful (no content)
        404:
          description: |
            The UUID parameter does not refer to a scene or the user does not have access to the scene it refers to
          schema:
            $ref: '#/definitions/Error'
  /scene-grids/{bboxCoordinates}/{zoom}:
    get:
      summary: Scene statistics. Geojson FeatureCollection grid which lines up with map tiles and gives scene intersection count
      tags:
        - Statistics
      parameters:
        - $ref: '#/parameters/bboxCoordinates'
        - $ref: '#/parameters/zoom'
        - $ref: '#/parameters/organization'
        - $ref: '#/parameters/maxCloudCover'
        - $ref: '#/parameters/minCloudCover'
        - $ref: '#/parameters/minAcquisitionDatetime'
        - $ref: '#/parameters/maxAcquisitionDatetime'
        - $ref: '#/parameters/minCreateDatetime'
        - $ref: '#/parameters/maxCreateDatetime'
        - $ref: '#/parameters/datasource'
        - $ref: '#/parameters/month'
        - $ref: '#/parameters/maxSunAzimuth'
        - $ref: '#/parameters/minSunAzimuth'
        - $ref: '#/parameters/maxSunElevation'
        - $ref: '#/parameters/minSunElevation'
        - $ref: '#/parameters/minResolution'
        - $ref: '#/parameters/maxResolution'
        - $ref: '#/parameters/tags'
      responses:
        200:
          description: Statistics for the given bounding box
          schema:
            $ref: '#/definitions/SceneGrid'
        400:
          description: Invalid Parameters
          schema:
            $ref: '#/definitions/Error'
  /buckets/:
    get:
      summary: Get list of buckets the user is authorized to view
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/orderingBase'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/organization'
        - $ref: '#/parameters/tags'
      responses:
        200:
          description: Paginated list of buckets the user is authorized to view
          schema:
            $ref: '#/definitions/BucketPaginated'
    post:
      summary: Create a new bucket
      tags:
        - Imagery
      parameters:
        - name: bucket
          in: body
          required: true
          schema:
            $ref: '#/definitions/Bucket'
      responses:
        202:
          description: Bucket details; at this point scene processes may be in-progress
          schema:
            $ref: '#/definitions/Bucket'
  /buckets/{uuid}/:
    get:
      summary: Retrieve bucket details
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        200:
          description: Info about Bucket
          schema:
            $ref: '#/definitions/Bucket'
        404:
          description: |
            UUID parameter does not refer to a bucket or the user is not able to view the bucket it refers to
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update a bucket
      tags:
        - Imagery
      parameters:
        - name: bucket
          in: body
          required: true
          schema:
            $ref: '#/definitions/Bucket'
        - $ref: '#/parameters/uuid'
      responses:
        204:
          description: Update successful (no further processing needed)
        404:
          description: |
            The UUID parameter does not refer to a bucket or the user does not have access to the bucket it refers to
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete a bucket
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        204:
          description: Deletion successful (no content)
        404:
          description: The UUID parameter does not refer to a bucket or the user does not have access to the bucket it refers to
          schema:
            $ref: '#/definitions/Error'
  /buckets/{uuid}/scenes/:
    get:
      summary: Get a list of scenes associated with this bucket
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/orderingScene'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/organization'
        - $ref: '#/parameters/maxCloudCover'
        - $ref: '#/parameters/minCloudCover'
        - $ref: '#/parameters/minAcquisitionDatetime'
        - $ref: '#/parameters/maxAcquisitionDatetime'
        - $ref: '#/parameters/minCreateDatetime'
        - $ref: '#/parameters/maxCreateDatetime'
        - $ref: '#/parameters/datasource'
        - $ref: '#/parameters/month'
        - $ref: '#/parameters/maxSunAzimuth'
        - $ref: '#/parameters/minSunAzimuth'
        - $ref: '#/parameters/maxSunElevation'
        - $ref: '#/parameters/minSunElevation'
        - $ref: '#/parameters/minResolution'
        - $ref: '#/parameters/maxResolution'
        - $ref: '#/parameters/tags'
      responses:
        200:
          description: Paginated list of scenes associated with this bucket
          schema:
            $ref: '#/definitions/ScenePaginated'
    post:
      summary: Create a new association between a set of scenes and this bucket
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/uuid'
        - name: scenes
          in: body
          required: true
          description: UUIDs of scenes to place in bucket
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        201:
          description: List of scenes added to bucket
          schema:
            type: array
            items:
              $ref: '#/definitions/Scene'
    put:
      summary: Replace the set of scenes in a bucket
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/uuid'
        - name: scenes
          in: body
          required: true
          description: UUIDs of scenes to replace in bucket
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        204:
          description: No content, update successful
    delete:
      summary: Delete a set of scenes from a bucket
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/uuid'
        - name: scenes
          in: body
          required: true
          description: UUIDs of scenes to delete in bucket
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        204:
          description: No content, delete successful
  /images/:
    get:
      summary: Paginated list of bucket images
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/orderingBase'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/sceneId'
        - $ref: '#/parameters/minRawDataBytes'
        - $ref: '#/parameters/maxRawDataBytes'
        - $ref: '#/parameters/minResolution'
        - $ref: '#/parameters/maxResolution'
      responses:
        200:
          description: Paginated list of images
          schema:
            $ref: '#/definitions/ImagePaginated'
    post:
      summary: Create a new image not associated with any Bucket
      tags:
        - Imagery
      parameters:
        - name: image
          in: body
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        202:
          description: Bucket image details; thumbnails and boundary in-progress
          schema:
            $ref: '#/definitions/Image'
  /images/{uuid}:
    get:
      summary: Details of a Image
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        200:
          description: Image details
          schema:
            $ref: '#/definitions/Image'
        404:
          description: Image UUID was not found
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update a Image
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/uuid'
        - name: image
          in: body
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        202:
          description: Update successful, further processing required
          schema:
            $ref: '#/definitions/Image'
        200:
          description: Update successful, no further processing required
          schema:
            $ref: '#/definitions/Image'
        404:
          description: Image UUID was not found
          schema:
            $ref: '#/definitions/Error'
  /thumbnails/:
    get:
      summary: Paginated list of thumbnails
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/orderingBase'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/sceneId'
      responses:
        200:
          description: Paginated list of thumbnail images
          schema:
            $ref: '#/definitions/ThumbnailPaginated'
  /thumbnails/{uuid}/:
    get:
      summary: Thumbnail details
      tags:
        - Imagery
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        200:
          description: Details on Thumbnail object
          schema:
            $ref: '#/definitions/Thumbnail'
        404:
          description: Thumbnail UUID was not found
          schema:
            $ref: '#/definitions/Error'
  /tokens/:
    get:
      summary: |
        Retrieve a list of refresh token summaries. Note: Only names and identifiers are revealed,
        refresh tokens themselves are only revealed once, when created for security purposes.
      tags:
        - Authentication
      responses:
        200:
          description: List of refresh token identifiers
          schema:
            type: array
            items:
              $ref: '#/definitions/RefreshToken'
        404:
          description: No refresh tokens found for user
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: |
        Request a new JSON web token to use in requests using a refresh token
      parameters:
        - name: refreshToken
          in: body
          required: true
          description: Refresh token object to use when requesting a new JWT
          schema:
            type: object
            properties:
              refresh_token:
                type: string
                description: Refresh token used to generate new JWT
      tags:
        - Authentication
      responses:
        201:
          description: Retrieved a new auth token
          schema:
            $ref: '#/definitions/AuthToken'
        default:
          description: Error message if insufficient permissions are present
  /tokens/{refreshTokenId}/:
    delete:
      parameters:
        - name: refreshTokenId
          in: path
          required: true
          type: string
      summary: Delete a refresh token and revoke its access
      tags:
        - Authentication
      responses:
        204:
          description: Revocation successful, No Content
  /models/:
    get:
      summary: Lists models that perform a set of geoprocessing/map algebra functions
      tags:
        - Model Lab
      parameters:
        - $ref: '#/parameters/orderingBase'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/minRating'
        - $ref: '#/parameters/maxRating'
        - $ref: '#/parameters/modelCategory'
        - $ref: '#/parameters/modelTag'
        - $ref: '#/parameters/search'
      responses:
        200:
          description: Returns a paginated list of models
          schema:
            $ref: '#/definitions/ModelPaginated'
        404:
          description: Error message if insufficient permissions or objects not present
        default:
          description: Error message if insufficient permissions
    post:
      summary: Create a new geoprocessing model
      tags:
        - Model Lab
      responses:
        201:
          description: Create a new geoprocessing model
          schema:
            $ref: '#/definitions/Model'
        default:
          description: Error message if insufficient permissions to create a new model
  /models/{uuid}/:
    get:
      summary: Retrieve details for a single geoprocessing model
      tags:
        - Model Lab
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        200:
          description: Geoprocessing model record
          schema:
            $ref: '#/definitions/Model'
        404:
          description: Error message returned if insufficent permissions or model does not exist
    delete:
      summary: Delete a model
      tags:
        - Model Lab
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        204:
          description: Delete successful
        default:
          description: Delete unsuccessful, either object did not exist or insufficient permissions
    put:
      summary: Update a geoprocessing model
      tags:
        - Model Lab
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        204:
          description: Update an existing geoprocessing model
        404:
          description: Error message if insufficient permissions to update a model
  /model-tags/:
    get:
      summary: List model tags
      tags:
        - Model Lab
      parameters:
        - $ref: '#/parameters/search'
      responses:
        200:
          description: Retrieve a paginated list of model tags
          schema:
            $ref: '#/definitions/ModelTagPaginated'
        404:
          description: Error message if insufficent permissions or no models exist
    post:
      summary: Create a model tag
      tags:
        - Model Lab
      responses:
        201:
          description: Successfully created a new tag for models
          schema:
            $ref: '#/definitions/ModelTag'
        default:
          description: Error message if insufficient permissions to create a model
  /model-tags/{uuid}/:
    get:
      summary: Get detail of a model tag
      tags:
        - Model Lab
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        200:
          description: Successfully retrieved a model
          schema:
            $ref: '#/definitions/ModelTag'
        404:
          description: Error message if insufficient permissions or tag does not exist
    delete:
      summary: Delete a given tag
      tags:
        - Model Lab
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        204:
          description: Successfully deleted a tag
        default:
          description: Error message if insufficient permissions to delete a tag
    put:
      summary: Update a given model tag
      tags:
        - Model Lab
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        204:
          description: Successfully updated tag
        default:
          description: Unable to delete tag due to insufficient permissions or tag does not exist
  /model-categories/:
    get:
      summary: Retrieve list of model categories
      parameters:
        - $ref: '#/parameters/search'
      tags:
        - Model Lab
      responses:
        200:
          description: Paginated list of model categories
          schema:
            $ref: '#/definitions/ModelCategoryPaginated'
    post:
      summary: Create a new model category
      tags:
        - Model Lab
      responses:
        201:
          description: Successfully created a new model category
          schema:
            $ref: '#/definitions/ModelCategory'
  /model-categories/{uuid}/:
    get:
      summary: Retrieve details of a model category
      tags:
        - Model Lab
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        200:
          description: Retrieved a single model category
          schema:
            $ref: '#/definitions/ModelCategory'
    put:
      summary: Update a model category
      tags:
        - Model Lab
      responses:
        204:
          description: Successfully updated a model category
      parameters:
        - $ref: '#/parameters/uuid'
    delete:
      summary: Delete a model category
      tags:
        - Model Lab
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        204:
          description: Successfully deleted a model category

parameters:
  orderingBase:
    name: ordering
    in: query
    description: Field to order results by; meaning of label varies based on model
    type: array
    collectionFormat: pipes
    items:
      type: string
      enum:
        - createdAt,desc
        - createdAt,asc
        - modifiedAt,desc
        - modifiedAt,asc
  organization:
    name: organization
    in: query
    description: UUID for organization to filter by
    type: string
    format: uuid
  sceneId:
    name: sceneId
    in: query
    description: UUID for scene
    type: string
    format: uuid
  page:
    name: page
    in: query
    description: Page of results to go to
    type: number
    format: int32
  pageSize:
    name: pageSize
    in: query
    description: Number of results per page in paginated response
    type: number
    format: int32
  uuid:
    name: uuid
    in: path
    required: true
    type: string
    format: uuid
  minCloudCover:
    name: minCloudCover
    description: Only return results with cloud cover greater than this number
    in: query
    type: number
    minimum: 0
    maximum: 1.0
    required: false
  maxCloudCover:
    name: maxCloudCover
    description: Only return results with cloud cover less than this number
    in: query
    type: number
    required: false
  minAcquisitionDatetime:
    name: minAcquisitionDatetime
    description: Only return results acquired after this datetime
    in: query
    type: string
    required: false
    format: datetime
  maxAcquisitionDatetime:
    name: maxAcquisitionDatetime
    description: Only return results acquired before this datetime
    in: query
    type: string
    required: false
    format: datetime
  minCreateDatetime:
    name: minCreateDatetime
    description: Only return results created after this datetime
    in: query
    type: string
    required: false
    format: datetime
  minSunElevation:
    name: minSunElevation
    description: Only return results with sun elevation greater than this value
    in: query
    type: number
    required: false
  maxSunElevation:
    name: maxSunElevation
    description: Only return results with sun elevation less than this value
    in: query
    type: number
    required: false
  minSunAzimuth:
    name: minSunAzimuth
    description: Only return results with sun elevation greater than this value
    in: query
    type: number
    required: false
  maxSunAzimuth:
    name: maxSunAzimuth
    description: Only return results with sun azium greater than this value
    in: query
    type: number
    required: false
  maxCreateDatetime:
    name: maxCreateDatetime
    description: Only return results created before this datetime
    in: query
    type: string
    required: false
    format: datetime
  tags:
    name: tags
    description: Only return results that contain these tags
    in: query
    type: array
    required: false
    items:
      type: string
  datasource:
    name: datasource
    description: Only return results belonging to this datasource
    in: query
    type: array
    required: false
    items:
      type: string
      format: uuid
  month:
    name: month
    description: Only return results from this month
    required: false
    in: query
    type: array
    items:
      type: number
      format: int
      maximum: 12
      minimum: 1
  orderingScene:
    name: ordering
    in: query
    description: Fields to sort scenes by
    type: array
    collectionFormat: pipes
    items:
      type: string
      enum:
        - createdAt,desc
        - createdAt,asc
        - modifiedAt,desc
        - modifiedAt,asc
        - organization,asc
        - organization,desc
        - datasource,asc
        - datasource,desc
        - month,asc
        - month,desc
        - createDatetime,asc
        - createDatetime,desc
        - acquisitionDatetime,asc
        - acquisitionDatetime,desc
        - sunAzimuth,asc
        - sunAzimuth,desc
        - cloudCover,asc
        - cloudCover,desc
  modelTag:
    name: modelTag
    description: Only return results that contain these model tags
    in: query
    type: array
    required: false
    items:
      type: string
      format: uuid
  modelCategory:
    name: modelCategory
    description: Only return results that satisfy this category
    in: query
    type: array
    required: false
    items:
      type: string
      format: uuid
  minRating:
    name: minRating
    description: Only return results greater than this rating
    in: query
    type: number
    required: false
  maxRating:
    name: maxRating
    description: Only return results less than this rating
    in: query
    type: number
    required: false
  search:
    name: search
    description: Full text search string
    in: query
    type: string
    required: false
  minRawDataBytes:
    name: minRawDataBytes
    description: Only return images larger than this amount of bytes
    in: query
    type: integer
    required: false
  maxRawDataBytes:
    name: maxRawDataBytes
    description: Only return images less than this amount of bytes
    in: query
    type: integer
    required: false
  minResolution:
    name: minResolution
    description: Only return objects that have elements greater than this resolution
    in: query
    type: number
    required: false
  maxResolution:
    name: maxResolution
    description: Only return objects that have elements with a resolution less than this amount
    in: query
    type: number
    required: false
  bboxCoordinates:
    name: bboxCoordinates
    description: Bounding box as a path parameter. eg "/southwest_lng,southwest_lat,northeast_lng,northeast_lat/"
    in: path
    type: string
    required: true
  zoom:
    name: zoom
    description: The zoom level used to split the bbox into a grid
    in: path
    type: number
    required: true
  bbox:
    name: bbox
    description: Bounding box. eg "bbox=southwest_lng,southwest_lat,northeast_lng,northeast_lat"
    in: query
    type: string
    required: false
  bucket:
    name: bucket
    description: Bucket uuid to filter only
    in: query
    type: string
    format: uuid
    required: false
definitions:
  BaseModel:
    type: object
    readOnly: true
    properties:
      id:
        type: string
        description: unique identifier for object
        format: uuid
      organizationId:
        type: string
        description: uuid for organization
  TimeModelMixin:
    type: object
    readOnly: true
    properties:
      createdAt:
        type: string
        description: timestamp of object creation
        format: date-time
      modifiedAt:
        type: string
        description: timestamp of object modificiation
        format: date-time
  UserTrackingMixin:
    type: object
    readOnly: true
    properties:
      createdBy:
        type: string
        format: uuid
        description: UUID of user who created the Object
      modifiedBy:
        type: string
        format: uuid
        description: UUID of user who most recently modified the object
  User:
    type: object
    required:
      - id
      - organizations
    properties:
      id:
        type: string
        description: User ID for Raster Foundry
      organizations:
        type: array
        description: List of organization's a user belongs to and their level of membership
        items:
          $ref: '#/definitions/UserOrg'
  RefreshToken:
    type: object
    properties:
      device_name:
        type: string
        description: User created identifier to track refresh tokens
      id:
        type: string
        description: Auth0 provided identifier used to delete refresh tokens
  AuthToken:
    type: object
    properties:
      id_token:
        type: string
        description: JSON Web Token that can be used for authenticating API requests
      token_type:
        type: string
        description: Type of token returned by using the refresh token
  UserCreate:
    type: object
    properties:
      id:
        type: string
        description: Auth0 ID for user
      organizationId:
        type: string
        format: uuid
        description: UUID for organization that user is being created for
      role:
        type: string
        description: Role to create user with in the provided organization
        enum:
          - USER
          - VIEWER
          - OWNER
  UserOrg:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: Identifier for organization in the database
      name:
        type: string
        description: Display name for organization
      role:
        type: string
        description: Level of membership in an organization
        enum:
          - USER
          - VIEWER
          - OWNER
  PaginatedResponse:
    type: object
    required:
      - count
      - hasNext
      - hasPrevious
      - page
      - pageSize
    properties:
      count:
        type: integer
        format: int32
        readOnly: true
        description: number of total objects matching query
      hasNext:
        type: boolean
        readOnly: true
        description: True if more results can be fetched, otherwise false
      hasPrevious:
        type: boolean
        readOnly: true
        description: True if previous results can be fetched, otherwise false
      page:
        type: integer
        readOnly: true
        format: int32
        description: Current page of paginated query results
      pageSize:
        type: integer
        format: int32
        description: Number of results per page
        readOnly: true
  UserPaginated:
    allOf:
      - $ref: '#/definitions/PaginatedResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/User'
  ScenePaginated:
    allOf:
      - $ref: '#/definitions/PaginatedResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Scene'

  OrganizationPaginated:
    allOf:
      - $ref: '#/definitions/PaginatedResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Organization'
  Organization:
    type: object
    allOf:
      - $ref: '#/definitions/BaseModel'
      - $ref: '#/definitions/TimeModelMixin'
    required:
      - name
      - id
    properties:
      name:
        type: string
        description: Display name for organization
  UserRole:
    type: object
    properties:
      id:
        type: string
        description: User id
        readOnly: true
      role:
        type: string
        description: User role in organization
      createdAt:
        type: string
        description: timestamp of object creation
        format: date-time
        readOnly: true
      modifiedAt:
        type: string
        description: timestamp of object modificiation
        format: date-time
        readOnly: true
    required:
      - id
      - role
      - createdAt
      - modifiedAt
  UserRolePaginated:
    allOf:
      - $ref: '#/definitions/PaginatedResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/UserRole'
  UserRoleCreate:
    type: object
    properties:
      id:
        type: string
        description: User id
      role:
        type: string
        description: User role in organization
    required:
      - id
      - role
  Scene:
    allOf:
      - $ref: '#/definitions/BaseModel'
      - $ref: '#/definitions/UserTrackingMixin'
      - type: object
        properties:
          name:
            type: string
            description: The display name of the bucket
          ingestSizeBytes:
            type: integer
            description: Size of ingested data in bytes.
          visibility:
            type: string
            description: Level of restriction on viewing
            enum:
              - PUBLIC
              - ORGANIZATION
              - OWNERONLY
          resolutionMeters:
            type: number
            description: Size of pixel in meters
          tags:
            type: array
            description: Tags associated with image
            items:
              - type: string
          images:
            type: array
            items:
              $ref: '#/definitions/Image'
          thumbnails:
            type: array
            items:
              $ref: '#/definitions/Thumbnail'
          dataSource:
            type: string
            format: uuid
            description: Data source scene originated from
          cloudCover:
            type: number
            format: float32
            description: Proportion of cloud coverage for scene
          acqusitionDate:
            type: string
            format: datetime
            description: Date scene was acquired from instrument (e.g. satellite, drone)
          footprint:
            type: object
            description: URI to boundary for this image
            readOnly: true
          sceneMetadata:
            type: object
            description: |
              Metadata about the scene -- some aspects we will eventually want to nail down that will
              be fairly common and/or required for scenes
          metadataFiles:
            type: array
            description: |
              Metadata files that should be present for processing all
              images in a scene (e.g. relevant .mtl files or .xml)
            items:
              - type: string
          thumbnailStatus:
            type: string
            description: status of thumbnail generation
            enum:
              - SUCCESS
              - FAILURE
              - PARTIALFAILURE
              - QUEUED
              - PROCESSING
          footprintStatus:
            type: string
            description: status of thumbnail generation
            enum:
              - SUCCESS
              - FAILURE
              - PARTIALFAILURE
              - QUEUED
              - PROCESSING
          status:
            type: string
            description: overall status of scene
            enum:
              - UPLOADING
              - SUCCESS
              - FAILURE
              - PARTIALFAILURE
              - QUEUED
              - PROCESSING
  SceneGrid:
    allOf:
      - type: object
        description: Geojson object
        properties:
          type:
            type: string
            description: Type of geojson feature. Expect 'FeatureCollection'
          polygons:
            type: array
            description: Geojson polygon for each grid cell
            items:
              type: object
              properties:
                type:
                  type: string
                  description: Geojson Feature
                geometry:
                  type: object
                  description: Geojson polygon
                  properties:
                    type:
                      type: string
                      description: Polygon 
                    coordinates:
                      type: array
                      description: list of polygon coordinate rings
                      items:
                        type: array
                        description: polygon coordinate ring
                        items:
                          type: array
                          description: coordinate pairs
                          items:
                            type: number
                            description: coordinate
                properties:
                  type: object
                  description: Geojson grid object properties
                  properties:
                    sceneCount:
                      type: number
                      description: Number of scenes which intersect the grid object
  Bucket:
    allOf:
      - $ref: '#/definitions/BaseModel'
      - $ref: '#/definitions/UserTrackingMixin'
      - type: object
        properties:
          name:
            type: string
            description: The display name of the bucket
          slugLabel:
            type: string
            description: URL-safe version of name
            readOnly: true
          description:
            type: string
            description: Long-form description of the bucket
          visibility:
            type: string
            description: Level of restriction on viewing
            enum:
              - PUBLIC
              - ORGANIZATION
              - OWNERONLY
          tags:
            type: array
            items:
              - type: string
  Image:
    allOf:
      - $ref: '#/definitions/BaseModel'
      - $ref: '#/definitions/UserTrackingMixin'
      - type: object
        properties:
          visibility:
            type: string
            description: Level of restriction on viewing
            enum:
              - PUBLIC
              - ORGANIZATION
              - OWNERONLY
          fileName:
            type: string
            description: Name of the image file
          sourceURI:
            type: string
            description: URI to original source. This should include a protocol-like prefix to identify where it is located http://, s3://, etc.
          rawDataBytes:
            type: integer
            description: Size of original uploaded imagery in bytes
          bands:
            type: array
            description: list of band types for image; a single band denotes a single band image, multiple bands should be listed in order (e.g if it is an RGB tiff then bands should be [red, green blue])
            items:
              $ref: '#/definitions/Band'
          scene:
            type: string
            format: uuid
            description: Scene that image is associated with
          image_metadata:
            type: object
            description: Metadata about this image
        required:
          - fileName
          - sourceURI
  BucketPaginated:
    allOf:
      - $ref: '#/definitions/PaginatedResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Bucket'
  ImagePaginated:
    allOf:
      - $ref: '#/definitions/PaginatedResponse'
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Image'
  Band:
    type: object
    properties:
      imageId:
        type: string
        format: UUID
      name:
        type: string
        description: String representation of band name
      number:
        type: integer
        description: Band number for image
      wavelength:
        type: array
        items:
          type: integer
  Thumbnail:
    allOf:
      - $ref: '#/definitions/BaseModel'
      - type: object
        properties:
          widthPx:
            type: integer
            format: int32
            description: The width of the thumbnail, in pixels
          scene:
            type: string
            format: uuid
            description: Scene that image is associated with
          heightPx:
            type: integer
            format: int32
            description: The height of the thumbnail, in pixels
          size:
            type: string
            description: Summary of size
            enum:
              - small
              - large
              - square
          url:
            type: string
            format: uri
            description: A client-accessible URL pointing to the image file
  ThumbnailPaginated:
    allOf:
    - $ref: '#/definitions/PaginatedResponse'
    - type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/definitions/Thumbnail'
  Model:
    allOf:
    - $ref: '#/definitions/BaseModel'
    - $ref: '#/definitions/UserTrackingMixin'
    - type: object
      properties:
        title:
          type: string
          description: Title of model displayed to users
        description:
          type: string
          description: |
            A long description of the model, including is use-cases,
            purpose, and any potential references
        requirements:
          type: string
          description: A brief description of requirements, including any relevant band requirements
        tags:
          type: array
          description: Model tags associated with a model
          items:
            type: string
        categories:
          type: array
          description: Category of geoprocessing model
          items:
            type: string
        license:
          type: string
          description: Usage license of model
        compatibleDatasources:
          type: array
          description: Datasources that can be used with this geoprocessing model
          items:
            type: string
        stars:
          type: number
          description: User rating of geoprocessing model
        visibility:
          type: string
          description: Level of restriction on viewing
          enum:
            - PUBLIC
            - ORGANIZATION
            - OWNERONLY
  ModelPaginated:
    allOf:
    - $ref: '#/definitions/PaginatedResponse'
    - type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/definitions/Model'
  ModelTag:
    allOf:
    - $ref: '#/definitions/BaseModel'
    - $ref: '#/definitions/UserTrackingMixin'
    - type: object
      properties:
        label:
          type: string
          description: User displayed label
  ModelTagPaginated:
    allOf:
    - $ref: '#/definitions/PaginatedResponse'
    - type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/definitions/ModelTag'
  ModelCategory:
    allOf:
    - $ref: '#/definitions/BaseModel'
    - type: object
      properties:
        label:
          type: string
          description: User displayed label for category
  ModelCategoryPaginated:
      allOf:
      - $ref: '#/definitions/PaginatedResponse'
      - type: object
        properties:
          results:
            type: array
            items:
              $ref: '#/definitions/ModelCategory'
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
