version: "2.3"
services:
  postgres:
    image: quay.io/azavea/postgis:3-postgres12.2-slim
    volumes:
      - ./data/:/tmp/data/
    env_file: .env
    expose:
      - "5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: postgres -c log_statement=all

  nginx-api:
    image: raster-foundry-nginx-api:${GIT_COMMIT:-latest}
    build:
      context: ./nginx
      dockerfile: Dockerfile.api

  nginx-backsplash:
    image: raster-foundry-nginx-backsplash:${GIT_COMMIT:-latest}
    build:
      context: ./nginx
      dockerfile: Dockerfile.backsplash

  app-frontend:
    image: node:10
    working_dir: /opt/raster-foundry/app-frontend/
    volumes:
      - ./app-frontend/.babelrc:/opt/raster-foundry/app-frontend/.babelrc
      - ./app-frontend/config/:/opt/raster-foundry/app-frontend/config/
      - ./nginx/srv/dist/:/opt/raster-foundry/app-frontend/dist/
      - ./app-frontend/yarn.lock:/opt/raster-foundry/app-frontend/yarn.lock
      - ./app-frontend/.eslintrc:/opt/raster-foundry/app-frontend/.eslintrc
      - ./app-frontend/karma.conf.js:/opt/raster-foundry/app-frontend/karma.conf.js
      - ./.node_modules:/opt/raster-foundry/app-frontend/node_modules
      - ./app-frontend/package.json:/opt/raster-foundry/app-frontend/package.json
      - ./app-frontend/src:/opt/raster-foundry/app-frontend/src
      - ./app-frontend/webpack.config.js:/opt/raster-foundry/app-frontend/webpack.config.js
      - ./docs/swagger/:/opt/swagger/
    entrypoint: yarn
    command: run build

  api-server-test:
    # If changing container, make sure to update app-backend/api/Dockerfile as well
    image: quay.io/azavea/openjdk-gdal:2.4-jdk11-slim
    links:
      - postgres:database.service.rasterfoundry.internal
      - memcached:memcached.service.rasterfoundry.internal
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      - HIKARI_LOG_LEVEL=WARN
      - RF_LOG_LEVEL=WARN
      - TILE_SERVER_LOCATION
      - COURSIER_CACHE=/root/.coursier
      - BACKSPLASH_ENABLE_MULTITIFF=false
      - AWS_DEFAULT_PROFILE=raster-foundry
      - GROUNDWORK_URL_BASE=http://localhost:3000/
      - INTERCOM_ADMIN_ID=bogus
      - INTERCOM_TOKEN=bogus
    expose:
      - 9000
    volumes:
      - ./app-backend/:/opt/raster-foundry/app-backend/
      - ./scratch/:/opt/raster-foundry/scratch/
      - ./data/:/opt/data/
      - $HOME/.sbt:/root/.sbt
      - $HOME/.coursier:/root/.coursier
      - ./.bintray:/root/.bintray
      - $HOME/.ivy2:/root/.ivy2
      - $HOME/.aws:/root/.aws:ro
    working_dir: /opt/raster-foundry/app-backend/api/target/scala-2.12/
    entrypoint: java
    command:
      - "-jar"
      - "api-assembly.jar"

  memcached:
    image: memcached:1.4-alpine
    command: -m 4096 -c 8192 -I 5242880b

  api-server:
    image: raster-foundry-api-server:${GIT_COMMIT:-latest}
    build:
      context: ./app-backend/api
      dockerfile: Dockerfile

  backsplash:
    image: raster-foundry-backsplash:${GIT_COMMIT:-latest}
    build:
      context: ./app-backend/backsplash-server
      dockerfile: Dockerfile

  app-migrations:
    image: raster-foundry-app-migrations:${GIT_COMMIT:-latest}
    build:
      context: ./app-backend/db
      dockerfile: Dockerfile.migrations
    volumes:
      - $HOME/.coursier-cache:/root/.coursier-cache

  batch:
    image: raster-foundry-batch:${GIT_COMMIT:-latest}
    build:
      context: ./app-tasks
      dockerfile: Dockerfile
    volumes:
      - ./app-tasks/rf/:/opt/raster-foundry/app-tasks/rf/

  build:
    image: raster-foundry-build:${GIT_COMMIT:-latest}
    build:
      context: ./app-backend
      dockerfile: Dockerfile.build
    env_file: .env
    environment:
      - COURSIER_CACHE=/root/.coursier
    volumes:
      - ./app-backend/:/opt/raster-foundry/app-backend/
      - ./scratch/:/opt/raster-foundry/scratch/
      - ./.git:/opt/raster-foundry/.git
      - ./.bintray:/root/.bintray
      - $HOME/.coursier:/root/.coursier
      - $HOME/.sbt:/root/.sbt
      - $HOME/.aws:/root/.aws:ro
      - $HOME/.gnupg:/root/.gnupg:ro
    working_dir: /opt/raster-foundry/app-backend/
    entrypoint: ./sbt

  sbt-test:
    image: quay.io/azavea/openjdk-gdal:2.4-jdk8-slim
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - postgres:database.service.rasterfoundry.internal
      - memcached:memcached.service.rasterfoundry.internal
      - api-server-test:api.service.rasterfoundry.internal
    env_file: .env
    environment:
      - RF_LOG_LEVEL=INFO
      - COURSIER_CACHE=/root/.coursier
    volumes:
      - ./app-backend/:/opt/raster-foundry/app-backend/
      - ./data/:/opt/data/
      - $HOME/.sbt:/root/.sbt
      - $HOME/.coursier:/root/.coursier
      - ./.bintray:/root/.bintray
      - $HOME/.ivy2:/root/.ivy2
      - $HOME/.aws:/root/.aws:ro
    working_dir: /opt/raster-foundry/app-backend/
    entrypoint: ./sbt

  lambda:
    build:
      context: app-lambda
      dockerfile: Dockerfile.test
    volumes:
      - ./app-lambda/:/opt/raster-foundry/app-lambda/
    working_dir: /opt/raster-foundry/app-lambda/
  shellcheck:
    image: koalaman/shellcheck:stable
    volumes:
      - ./:/usr/local/src
    working_dir: /usr/local/src

  panrec:
    image: jisantuc/panrec:ba13f43
    volumes:
      - ./stubs:/opt/data/out
      - ./app-backend:/opt/data/app-backend
    entrypoint: "./panrec"
    command:
      - "-i"
      - "scala"
      - "-o"
      - "ts-interface"
      - "/opt/data/app-backend/datamodel/src/main/scala"
      - "/opt/data/out"
