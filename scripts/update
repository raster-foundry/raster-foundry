#!/bin/bash
set -e

if [[ -n "${RF_DEBUG}" ]]; then
    set -x
fi

DIR="$(dirname "$0")"

function usage() {
    echo -n \
"Usage: $(basename "$0")

Update project dependencies, build assembly JARs, run database migrations, 
and build static asset bundle.
"
}

function run_database_migrations() {
    # Check if database migrations have already been initialized
    set +e
    docker-compose \
        exec -T postgres \
        psql -U rasterfoundry -d rasterfoundry -c 'select 1 from __migrations__'
    status_check=$?
    set -e
    if [ $status_check == 0 ]; then
        echo "Migrations already initialized"
    else
        # Initialize the database for migrations.
        docker-compose \
            run --rm sbt \
            "migrations/run init"
    fi

    # Run database migrations. The way scala-forklift works requires this to be called twice:
    # the first run figures out the migrations to run and the second run applies them.
    docker-compose \
        run --rm sbt \
        ";migrations/run update;migrations/run apply"
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    else
        echo "Updating Scala dependencies"
        docker-compose \
            run --rm --no-deps sbt \
            update

        echo "Building Scala assembly JARs"
        docker-compose \
            run --rm --no-deps sbt \
            ";api/assembly;backsplash-server/assembly"

        echo "Running application database migrations"
        run_database_migrations

        echo "Updating frontend dependencies"
        docker-compose \
            -f "${DIR}/../docker-compose.yml" \
            -f "${DIR}/../docker-compose.test.yml" \
            run --rm app-frontend install

        echo "Building static asset bundle"
        docker-compose \
            -f "${DIR}/../docker-compose.yml" \
            -f "${DIR}/../docker-compose.test.yml" \
            run --rm app-frontend run build
    fi
fi
