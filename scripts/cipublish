#!/bin/bash

set -e

if [[ -n "${RF_DEBUG}" ]]; then
    set -x
fi

DIR="$(dirname "$0")"

function usage() {
    echo -n \
"Usage: $(basename "$0")

Publish container images to Elastic Container Registry (ECR) and
other artifacts to S3.
"
}

if [[ -n "${GIT_COMMIT}" ]]; then
    GIT_COMMIT="${GIT_COMMIT:0:7}"
else
    GIT_COMMIT="$(git rev-parse --short HEAD)"
fi

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    else
        if [[ -n "${AWS_ECR_ENDPOINT}" ]]; then
            echo "Building sbt container for migrations"
            GIT_COMMIT="${GIT_COMMIT}" docker-compose \
                      -f "${DIR}/../docker-compose.test.yml"\
                      build app-migrations

            echo "Building ingest JAR"
            docker-compose \
                run --rm --no-deps api-server ingest/clean
            docker-compose \
                run --rm --no-deps api-server ingest/assembly

            echo "Building application JAR"
            docker-compose \
                run --rm --no-deps api-server api/clean
            docker-compose \
                run --rm --no-deps api-server api/assembly

            echo "Building tile server JAR"
            docker-compose \
                run --rm --no-deps tile-server tile/clean
            docker-compose \
                run --rm --no-deps tile-server tile/assembly

            echo "Building container images"
            GIT_COMMIT="${GIT_COMMIT}" docker-compose \
                      -f "${DIR}/../docker-compose.yml" \
                      -f "${DIR}/../docker-compose.test.yml"\
                      build nginx api-server tile-server spark-ingest

            # Evaluate the return value of the get-login subcommand, which
            # is a docker login command with temporarily ECR credentials.
            eval "$(aws ecr get-login)"

            docker tag "raster-foundry-nginx:${GIT_COMMIT}" \
                   "${AWS_ECR_ENDPOINT}/raster-foundry-nginx:${GIT_COMMIT}"
            docker tag "raster-foundry-spark-ingest:${GIT_COMMIT}" \
                   "${AWS_ECR_ENDPOINT}/raster-foundry-spark-ingest:${GIT_COMMIT}"
            docker tag "raster-foundry-api-server:${GIT_COMMIT}" \
                   "${AWS_ECR_ENDPOINT}/raster-foundry-api-server:${GIT_COMMIT}"
            docker tag "raster-foundry-tile-server:${GIT_COMMIT}" \
                   "${AWS_ECR_ENDPOINT}/raster-foundry-tile-server:${GIT_COMMIT}"
            docker tag "raster-foundry-airflow:${GIT_COMMIT}" \
                   "${AWS_ECR_ENDPOINT}/raster-foundry-airflow:${GIT_COMMIT}"
            docker tag "raster-foundry-app-migrations:${GIT_COMMIT}" \
                   "${AWS_ECR_ENDPOINT}/raster-foundry-migrations:${GIT_COMMIT}"

            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-nginx:${GIT_COMMIT}"
            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-spark-ingest:${GIT_COMMIT}"
            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-api-server:${GIT_COMMIT}"
            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-tile-server:${GIT_COMMIT}"
            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-airflow:${GIT_COMMIT}"
            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-migrations:${GIT_COMMIT}"

            echo "Uploading Spark Ingest JAR to S3"
            aws s3 cp \
                "${DIR}/../app-backend/ingest/target/scala-2.11/rf-ingest.jar" \
                "s3://${RF_ARTIFACTS_BUCKET}/ingest/rf-ingest-${GIT_COMMIT}.jar"
        else
            echo "ERROR: No AWS_ECR_ENDPOINT variable defined."
            exit 1
        fi
    fi
fi
