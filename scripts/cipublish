#!/bin/bash

set -e

if [[ -n "${RF_DEBUG}" ]]; then
    set -x
fi

DIR="$(dirname "$0")"

function usage() {
    echo -n \
"Usage: $(basename "$0")

Publish container images to Elastic Container Registry (ECR) and
other artifacts to S3.
"
}

if [[ -n "${GIT_COMMIT}" ]]; then
    GIT_COMMIT="${GIT_COMMIT:0:7}"
else
    GIT_COMMIT="$(git rev-parse --short HEAD)"
fi

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    else
        if [[ -n "${AWS_ECR_ENDPOINT}" ]]; then
            echo "Building sbt container for migrations"
            GIT_COMMIT="${GIT_COMMIT}" docker-compose \
                      -f "${DIR}/../docker-compose.test.yml"\
                      build app-migrations

            echo "Building application JAR"
            docker-compose \
                -f "${DIR}/../docker-compose.test.yml" \
                run --rm --no-deps \
                build api/assembly

            echo "Building backsplash JAR"
            docker-compose \
                -f "${DIR}/../docker-compose.test.yml" \
                run --rm --no-deps \
                build backsplash-server/assembly

            echo "Building lambda functions"
            docker-compose -f "${DIR}/../docker-compose.test.yml" \
                           run --rm --no-deps lambda \
                           pip install -t opt/ ./
            docker-compose -f "${DIR}/../docker-compose.test.yml" \
                           run --rm --no-deps lambda \
                           cp -r "/opt/raster-foundry/app-lambda/rflambda/" "/opt/raster-foundry/app-lambda/opt/"
            pushd "${DIR}/../app-lambda/opt/"
              zip -9 -r ../package.zip ./*
            popd

            echo "Uploading Lambda Function"
            aws s3 cp \
                "${DIR}/../app-lambda/package.zip" \
                "s3://${RF_ARTIFACTS_BUCKET}/lambda-functions/package-${GIT_COMMIT}.zip"
            rm "${DIR}/../app-lambda/package.zip"

            echo "Uploading API specs"
            # At the most recent version prefixed
            aws s3 sync \
                "${DIR}/../docs/swagger/" \
                "s3://${RF_DOCS_BUCKET}/spec/$(git describe --abbrev=0 --tags)/"
            # At the root
            aws s3 sync \
                "${DIR}/../docs/swagger/" \
                "s3://${RF_DOCS_BUCKET}/spec/"

            # Build publishable sbt projects as SNAPSHOT artifacts and
            # publish to Sonatype OSSRH (Snapshot Repository).
            if [ "$(whoami)" == "jenkins" ]; then
                echo "Publishing SNAPSHOT artifacts to Sonatype OSSRH (Snapshot Repository)"

                docker-compose \
                   -f "${DIR}/../docker-compose.test.yml" \
                   run --rm --no-deps \
                   -e SONATYPE_USERNAME="${SONATYPE_USERNAME}" \
                   -e SONATYPE_PASSWORD="${SONATYPE_PASSWORD}" \
                   -e PGP_HEX_KEY="${PGP_HEX_KEY}" \
                   -e PGP_PASSPHRASE="${PGP_PASSPHRASE}" \
                   build gitSnapshots publishSigned
            fi

            echo "Building container images"
            GIT_COMMIT="${GIT_COMMIT}" docker-compose \
                      -f "${DIR}/../docker-compose.yml" \
                      -f "${DIR}/../docker-compose.test.yml"\
                      build nginx-api api-server nginx-backsplash backsplash

            # Evaluate the return value of the get-login subcommand, which
            # is a docker login command with temporarily ECR credentials.
            eval "$(aws ecr get-login --no-include-email)"

            docker tag "raster-foundry-nginx-api:${GIT_COMMIT}" \
                   "${AWS_ECR_ENDPOINT}/raster-foundry-nginx-api:${GIT_COMMIT}"
            docker tag "raster-foundry-api-server:${GIT_COMMIT}" \
                   "${AWS_ECR_ENDPOINT}/raster-foundry-api-server:${GIT_COMMIT}"
            docker tag "raster-foundry-batch:${GIT_COMMIT}" \
                   "${AWS_ECR_ENDPOINT}/raster-foundry-batch:${GIT_COMMIT}"
            docker tag "raster-foundry-app-migrations:${GIT_COMMIT}" \
                   "${AWS_ECR_ENDPOINT}/raster-foundry-migrations:${GIT_COMMIT}"

            docker tag "raster-foundry-nginx-backsplash:${GIT_COMMIT}" \
                    "${AWS_ECR_ENDPOINT}/raster-foundry-nginx-backsplash:${GIT_COMMIT}"
            docker tag "raster-foundry-backsplash:${GIT_COMMIT}" \
                    "${AWS_ECR_ENDPOINT}/raster-foundry-backsplash:${GIT_COMMIT}"

            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-nginx-api:${GIT_COMMIT}"

            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-api-server:${GIT_COMMIT}"
            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-batch:${GIT_COMMIT}"
            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-migrations:${GIT_COMMIT}"

            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-nginx-backsplash:${GIT_COMMIT}"
            docker push "${AWS_ECR_ENDPOINT}/raster-foundry-backsplash:${GIT_COMMIT}"

        else
            echo "ERROR: No AWS_ECR_ENDPOINT variable defined."
            exit 1
        fi
    fi
fi
