#!groovy

node {
  properties([
    parameters([
      string(defaultValue: 'develop', description: 'First 7 characters of the SHA for the commit you wish to deploy.', name: 'GIT_COMMIT', trim: false),
      [$class: 'ValidatingStringParameterDefinition', 
      defaultValue: '', 
      description: 'The tag of the current release.', 
      failedValidationMessage: 'Invalid SemVer.', 
      name: 'RELEASE_TAG', 
      regex: /^\d+\.\d+\.\d+$/],
      string(defaultValue: 'rasterfoundry-production-config-us-east-1', description: 'Location of Terraform state & vars files.', name: 'RF_SETTINGS_BUCKET', trim: false),
      string(defaultValue: 'rasterfoundry-production-docs-site-us-east-1', description: 'Location of API documentation & specs.', name: 'RF_DOCS_BUCKET', trim: false),
      string(defaultValue: 'Production', description: 'Environment name, used to target Batch Compute Environments.', name: 'RF_DEPLOYMENT_ENVIRONMENT', trim: false),
      string(defaultValue: 'master', description: 'Branch of azavea/raster-foundry-deployment used for deployment.', name: 'RF_DEPLOYMENT_BRANCH', trim: false)
    ])
  ])
    
  try {
    env.AWS_DEFAULT_REGION = "us-east-1"

    // validate release tag ref
    stage('checkout') {
      checkout([$class: 'GitSCM',
               branches: [[name: params.GIT_COMMIT ]],
               extensions: [[$class: 'PruneStaleBranch']],
               userRemoteConfigs: [[credentialsId: '3bc1e878-814a-43d1-864e-2e378ebddb0f',
                                    url: 'https://github.com/raster-foundry/raster-foundry']]
              ])
    }

    stage('publish-specs') {
      sh """#!/bin/bash
        aws s3 sync docs/swagger/ s3://${params.RF_DOCS_BUCKET}/spec/${params.RELEASE_TAG}/
        aws s3 sync docs/swagger/ s3://${params.RF_DOCS_BUCKET}/spec/
      """
    }
  } catch(err) {
    def slackMessage = ":jenkins-angry: *Deployment #${env.BUILD_NUMBER} of release/hotfix ${params.RELEASE_TAG} has failed*"
    slackMessage += "\n<${env.BUILD_URL}|View Build>"
    slackSend color: 'danger', message: slackMessage

    throw err
  }
}
